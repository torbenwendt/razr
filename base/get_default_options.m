function op = get_default_options
% GET_DEFAULT_OPTIONS - Returns struct containing all default options for RAZR
%
% Usage:
%   op = GET_DEFAULT_OPTIONS
%
% See also: RAZR, SOP, EXPL_RIR_OPTIONS

%------------------------------------------------------------------------------
% RAZR engine for Mathwork's MATLAB
%
% Version 0.93
%
% Author(s): Torben Wendt
%
% Copyright (c) 2014-2017, Torben Wendt, Steven van de Par, Stephan Ewert,
% University Oldenburg, Germany.
%
% This work is licensed under the
% Creative Commons Attribution-NonCommercial-NoDerivs 4.0 International
% License (CC BY-NC-ND 4.0).
% To view a copy of this license, visit
% http://creativecommons.org/licenses/by-nc-nd/4.0/ or send a letter to
% Creative Commons, 444 Castro Street, Suite 900, Mountain View, California,
% 94041, USA.
%------------------------------------------------------------------------------


%% DO NOT EDIT THIS FILE!
%% This is the place where all default options are stored. If you'd like to synthesize BRIRs using
%% other options, please create a new structure specifying your desired options and pass it to RAZR.
%% In your custom options structure, only those fields need to be specified, whose values differ
%% from the default. All other fields will automatically be taken from the defaults.
%% For an example, see EXAMPLE_OPTIONS.M
%%
%% general options

op.fs = 44100;              % Sampling rate in Hz
op.len = [];                % RIR length in samples; if empty, it will be set to the estimated T60,
                              % (mean over frequencies) multiplied with op.len_rt_factor
op.len_max = 882e3;         % If op.len is larger than this value, the RIR length will
                              % automatically be reduced to this value (a warning will be displayed)
op.len_rt_factor = 1.0;     % See description of op.len
op.SPL_at_0dBFS = 100;      % SPL at 0 dB full scale
op.SPL_source = 100;        % SPL at 1 m distance to source
op.pseudoRand = 1;          % Use fixed seeds for all random generator initialisations?
op.seed_shift = 0;          % If op.pseudoRand = true, this number will be added to all rng seeds
op.rt_estim = 'eyring';     % RT-estimation measure ('eyring' or 'sabine'), see also ESTIMATE_RT
op.spat_mode = 'shm';       % Spatialization modes for {early, late} BRIR part, possible values:
                              % 'diotic', 'hrtf', 'ild' (broadband), 'shm' (spherical head model),
                              % 'array' (loudspeaker array, in development, not supported yet).
                              % If only one key string is specified, it will be used for both early
                              % and late RIR part.
op.array_render = 'nearest';  % Rendering mode for op.spat_mode = 'array', possible values:
                              % 'nearest' (map sources to nearest speaker in projection onto
                              % unit sphere). In development, not supported yet.
op.array_pos = [];          % Coordinates of the speakers relative to the listeners,
                              % if spat_mode is 'array'. In development, not supported yet.
op.hrtf_database = '';      % Key string for HRTF database. See BASE/HRTF/APPLY_HRTF.M or README
op.shm_warpMethod = 1;      % For sperical head model: Prewarp theta to better account for smaller 
                              % changes in attenuation at small theta
                              % warpMethod = 0 --> do not warp
                              % warpMethod = 1 --> exponent transform warp
                              % warpMethod = 2 --> alternative warping
op.enableSR = 0;            % Use smearing component? Vector [SRism, SRfdn], controls for ISM, FDN
op.typeSR = 2;              % Type of smearing
                              % 2: gamma like, cacade of 4 all-passes
                              % 6: original Schroeder reverberator, cacade of 4 all-passes
op.hrtf_options = struct;   % Struct containing options being passed to APPLY_HRTF
op.filtCreatMeth = 'cq';    % Method for reflection/absorption filter synthesis, possible options:
                              % 'cq': composedPEQ, 'sh': shEQ, 'cs': composedShelving, 'yw': yulewalk
op.diffrFiltMeth = 'comsh'; % Method for diffraction filter creation. Possible options:
                              % 'comsh': Comb and lowpass shelving filter
                              % 'grimm': Lowpass after Grimm and Luberadzka

op.return_rir_parts = 0;    % Return ir.sig_direct, ir.sig_early and ir.sig_late?
op.return_ism_data = 0;     % Return geometric data of ISM?
op.return_ism_sigmat = 0;   % Return monaural ISM output (one image source per matrix channel)?
op.return_op = 0;           % Return applied options structure (as additional field of ir)?
op.verbosity = 0;           % verbosity level, 0: no messages, >0: display calculation duration,
                              % >1: disp. calc. dur. for ISM and FDN, >2: disp. dur. for ISM orders
op.rirname = '';            % Name of RIR. If empty, the name of the room will be taken, if exists

%% options for early-reflection rendering (image source model)

op.ism_order = 3;               % Max. image source order or vector [minOrder, maxOrder]
op.ism_only = -1;               % Use only image source model? If not -1, this number overwrites
                                  % also op.ism_order and op.fdn_enabled (to 0). op.verbosity is set
                                  % to 3, if not specified.
op.ism_enableReflFilt = 1;      % Enable reflection filters?
op.ism_enable_scattering = 0;   % Enable scattering module?
op.ism_diffu_specu_ratio = 1.0; % Energy ratio of diffuse and specular reflections (1.0...2.0)
op.ism_enable_timespread = 1;   % Enable time spreading of diffuse reflections?
op.ism_enableAirAbsFilt = 1;    % Enable air absorption filters? (Set to -1 for excessive mode)
op.ism_enableToneCorr = 1;      % Enable tone correction filter?
op.ism_enableDiffrFilt = 1;     % Enable diffraction filtering for outside-lying receiver?
op.ism_diffr_mc_output = 0;     % Enable diffr. filtering on multichannel ISM output (which will be
                                  % the FDN input) (only enabled, if op.ism_enableDiffrFilt = 1)
op.ism_enableBP = 1;            % Enable global bandpass?
op.ism_refl_gain = 0;           % Gain (in dB), applied on all image sources
op.ism_filtlen = 4410;          % Shorten reflection and other filters to this length to save
                                  % computation
op.ism_jitter_type = 'cart';    % ISM jitter in 'cart' or 'sph' coordinates. 'cart_legacy' restores
                                  % behavior from RAZR 0.91 and before.
op.ism_jitter_factor = 0.05;    % Random factor on IS positions.
op.ism_rand_start_order = 2;    % ISM order at which the random jitter starts.
op.ism_norand_if_diffr = 1;     % Set op.ism_jitter_factor to zero, if diffraction is applied?
op.ism_discd_directions = [];   % Directions ([-3, -2, -1, +1, +2, +3] <-> [-z -y -x +x +y +z]), for
                                  % which all image sources are discarded. Automatically set, if
                                  % source or receiver lies outside room.
op.ism_drct_snd_rec_outs = 0;   % If true, render direct sound, if the receiver is outside the room
                                  % (For coupled rooms, the direct sound must rendered only once)

%% options for fdn

op.fdn_enabled = 1;             % Enable FDN?
op.fdn_numDelays = 12;          % Number of FDN delays (thus: channels). Up to now, only 12 possible
op.fdn_fmatrix = 'randOrth';    % Feedback matrix: 'eye' (unit matrix), 'house' (Householder),
                                  % 'hadam' (Hadamard), 'randOrth' (random orthogonal), also
                                  % direct input of a square matrix is possible
op.fdn_enable_apc = 1;          % Enable allpass cascade to smear FDN input?
op.fdn_enableAbsFilt = 1;       % Enable absorption filters?
op.fdn_enableReflFilt = 1;      % Enable reflection filters?
op.fdn_enableBP = 0;            % Enable global bandpass?
op.fdn_hrtf_on_cube = 1;        % Virt. reverb sources on cube surface around receiver? (Otherwise
                                  % on actual walls)
op.fdn_smart_ch_mapping = 0;    % Sort early refl. to FDN channels of similar directions
op.fdn_hrtf_boxdiags = 1;       % Box diagonals on which the virt. reverb srcs are placed on
                                  % (1: default, 2: opposing diags)
op.fdn_mfactor = 1.0;           % Factor to stretch delays
op.fdn_delays_choice = 'diag';  % Choice of FDN delays: 'roomdim2014': after Wendt et al. (2014),
                                  % JAES 62, 'diag', 'hyp', 'hyp2', 'lin': improved methods
op.fdn_delay_criterion = 'jot'; % Criterion for sufficient delay mode density; 'jot' or 'smith'.
op.fdn_door_idx_to_shift_angles = 0; % Idx of door to neighbour room, for which reverb is rendered.
                                  % Set to 0, if no neighbour room exists
op.fdn_return_mc_output = 0;    % Return the multichannel FDN output? (Field ir.sig_late_mc)
op.fdn_enable_spat_div = 1;     % Coupled rooms only: Map part of neighbour-room reverb to reverb-
                                  % cube of receiver room?
                                  
%% plots

op.plot_reflFilters = 0;        % Reflection filters (ISM)
op.plot_diffr_points_ism = 0;   % Diffraction points

op.plot_absFilters = 0;         % Absorption filters (FDN)
op.plot_filters_fdn_bin = 0;    % Reflection filters (FDN)
op.plot_shifted_angles = 0;     % Shifted virt. reverb sources (see op.fdn_door_idx_to_shift_angles)
